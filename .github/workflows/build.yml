name: Build

on:
  workflow_call:
    inputs:
      folder:
        required: true
        type: string
      image-name:
        required: true
        type: string
      build-args:
        required: false
        type: string
      tag-suffix:
        required: false
        type: string
      cache-key:
        required: false
        description: "Optional sub-key to append to the image name for build layer caching"
        type: string
    outputs:
      outcome:
        description: "The outcome of the build"
        value: ${{ jobs.build.outputs.outcome }}
      tags:
        description: "The resulting image tags"
        value: ${{ jobs.build.outputs.tags }}
      version:
        description: "The resulting image version"
        value: ${{ jobs.build.outputs.tags }}

jobs:
  build:
    name: Build Images
    runs-on: [ cw ]
    container: 'ghcr.io/coreweave/github-actions-images/github-base-runner:v1.6.0'
    defaults:
      run:
        shell: bash
    outputs:
      outcome: ${{ steps.docker-build.outcome }}
      tags: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Fetch BuildKit Client Certs
        uses: dopplerhq/secrets-fetch-action@v1.2.0
        id: client-certs
        with:
          doppler-token: ${{ secrets.ORG_BUILDKIT_CLIENT_TOKEN }}
          doppler-project: ${{ secrets.BUILDKIT_CONSUMER_DOPPLER_PROJECT }}
          doppler-config: prod
          inject-env-vars: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1
        with:
          driver: remote
          endpoint: ${{ secrets.BUILDKIT_CONSUMER_ENDPOINT }}
          append: |
            - endpoint: ${{ secrets.BUILDKIT_CONSUMER_AMD64_ENDPOINT }}
              platforms: linux/amd64
            - endpoint: ${{ secrets.BUILDKIT_CONSUMER_ARM64_ENDPOINT }}
              platforms: linux/arm64
        env:
          BUILDER_NODE_0_AUTH_TLS_CACERT: ${{ steps.client-certs.outputs.TLS_CACERT }}
          BUILDER_NODE_0_AUTH_TLS_CERT: ${{ steps.client-certs.outputs.TLS_CERT }}
          BUILDER_NODE_0_AUTH_TLS_KEY: ${{ steps.client-certs.outputs.TLS_KEY }}
          BUILDER_NODE_1_AUTH_TLS_CACERT: ${{ steps.client-certs.outputs.TLS_CACERT }}
          BUILDER_NODE_1_AUTH_TLS_CERT: ${{ steps.client-certs.outputs.TLS_CERT }}
          BUILDER_NODE_1_AUTH_TLS_KEY: ${{ steps.client-certs.outputs.TLS_KEY }}
          BUILDER_NODE_2_AUTH_TLS_CACERT: ${{ steps.client-certs.outputs.TLS_CACERT }}
          BUILDER_NODE_2_AUTH_TLS_CERT: ${{ steps.client-certs.outputs.TLS_CERT }}
          BUILDER_NODE_2_AUTH_TLS_KEY: ${{ steps.client-certs.outputs.TLS_KEY }}
      - name: Get base registry
        run: |
          echo "REGISTRY=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      - name: Set tag prefix
        if: github.ref_name != 'main'
        run: |
          echo "TAG_PREFIX=${{ github.ref_name }}-" >> $GITHUB_ENV
      - name: Set tag suffix
        if: inputs.tag-suffix != ''
        run: |
          echo "TAG_SUFFIX=-${{ inputs.tag-suffix }}" >> $GITHUB_ENV
      - name: Set cache key
        if: inputs.cache-key != ''
        run: |
          echo "CACHE_KEY=${{ inputs.image-name }}-${{ inputs.cache-key }}" >> $GITHUB_ENV
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ inputs.image-name }}
          tags: |
            type=sha,prefix=${{ env.TAG_PREFIX }},suffix=${{ env.TAG_SUFFIX }},format=short
      - name: Initialize registry credentials file
        env:
          USER: ${{ github.actor }}
          PASS: ${{ secrets.GITHUB_TOKEN }}
        run: |
          jq -n '.auths."ghcr.io" = { username: env.USER, password: env.PASS }' \
          | install -m400 /dev/stdin ~/.docker/config.json
      - name: Build and push Docker image
        id: docker-build
        uses: docker/build-push-action@v6.9.0
        with:
          context: ${{ inputs.folder }}
          build-args: |-
            ${{ inputs.build-args }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/buildcache:${{ env.CACHE_KEY || inputs.image-name }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/buildcache:${{ env.CACHE_KEY || inputs.image-name }},mode=max
          platforms: linux/amd64
      - name: Clear registry credentials
        if: always()
        run: |
          rm -f ~/.docker/config.json && [ ! -e ~/.docker/config.json ]
      - uses: 8BitJonny/gh-get-current-pr@2.1.3
        id: PR
        with:
          filterOutClosed: true
      - name: Comment
        if: steps.PR.outputs.number
        uses: peter-evans/create-or-update-comment@v2.1.0
        with:
          issue-number: ${{ steps.PR.outputs.number }}
          body: >
            @${{ github.triggering_actor }} Build complete, ${{ steps.docker-build.outcome }}:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Image: `${{ fromJSON(steps.docker-build.outputs.metadata)['image.name'] }}`
